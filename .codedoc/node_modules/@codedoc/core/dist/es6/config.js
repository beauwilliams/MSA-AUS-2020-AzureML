import { quotedComponents } from '@connectv/marked';
import { DefaultTheme } from './theme';
import { guessTitle } from './transport/guess-title';
import { Code } from './components/code';
import { Heading } from './components/heading';
import { Button, CopyButton, Buttons } from './components/button';
import { Tab, Tabs } from './components/tabs';
import { Collapse } from './components/collapse';
import { DarkLight, InLight, InDark } from './components/darkmode/darklight';
import { GithubButton } from './components/misc/github';
import { Watermark } from './components/misc/watermark';
import { codeSelection$ } from './components/code/selection';
import { sameLineLengthInCodes$ } from './components/code/same-line-length';
import { codeLineHints$ } from './components/code/line-hint';
import { codeLineRef$ } from './components/code/line-ref';
import { smartCopy$ } from './components/code/smart-copy';
import { copyHeadings$ } from './components/heading/copy-headings';
import { contentNavHighlight$ } from './components/page/contentnav/highlight';
import { deferredIframes$ } from './transport/deferred-iframe';
import { ToCHeading } from './components/page/toc/heading';
import { smoothLoading$ } from './transport/smooth-loading';
import { tocHighlight$ } from './components/page/toc/toc-highlight';
import { ToCPrevNext$ } from './components/page/toc/prevnext';
import { postNavSearch$ } from './components/page/toc/search/post-nav';
export const DefaultMarkdownCustomComponents = /*#__PURE__*/ {
    Tab, Tabs, Collapse,
    Button, Buttons, CopyButton,
    DarkLight, InDark, InLight,
    GithubButton, Watermark,
    ToCPrevNext: ToCPrevNext$,
};
export const DefaultToCMarkdownCustomComponents = /*#__PURE__*/ {
    Button, Buttons, Collapse,
    DarkLight, InDark, InLight,
    GithubButton, Watermark,
};
export const DefaultConfig = {
    src: {
        base: 'docs/md',
        toc: '_toc.md',
        pick: /\.md$/,
        drop: /(^_)|(\/_)/,
    },
    dest: {
        html: '.',
        assets: '.',
        bundle: 'docs/assets',
        styles: 'docs/assets',
        namespace: '',
    },
    bundle: {
        init: [
            codeSelection$, sameLineLengthInCodes$, codeLineHints$, codeLineRef$, smartCopy$,
            copyHeadings$, contentNavHighlight$, deferredIframes$, smoothLoading$, tocHighlight$,
            postNavSearch$,
        ],
    },
    dev: {
        port: 3000
    },
    page: {
        title: {
            base: 'New Codedoc Project',
            connector: ' | ',
            extractor: (content, config) => guessTitle(content, config.page.title.base, config.page.title.connector),
        }
    },
    theme: DefaultTheme,
    markdown: {
        Code,
        Heading,
        customComponents: DefaultMarkdownCustomComponents,
        BlockQuote: quotedComponents(DefaultMarkdownCustomComponents)
    },
    tocMarkdown: {
        Heading: ToCHeading,
        customComponents: DefaultToCMarkdownCustomComponents,
        BlockQuote: quotedComponents(DefaultToCMarkdownCustomComponents),
    },
};
/**
 *
 * Will create a codedoc configuration object (type `CodedocConfig`)
 * using the given config overrides. This will simply extend the default
 * configuration using given values in the overrides.
 *
 * @param override
 * @returns a complete codedoc configuration
 *
 */
export function configuration(override) {
    const res = Object.assign({}, DefaultConfig);
    if (override.src)
        Object.assign(res.src, override.src);
    if (override.dest)
        Object.assign(res.dest, override.dest);
    if (override.bundle)
        Object.assign(res.bundle, override.bundle);
    if (override.page) {
        if (override.page.title)
            Object.assign(res.page.title, override.page.title);
        if (override.page.favicon)
            res.page.favicon = override.page.favicon;
        if (override.page.meta)
            res.page.meta = override.page.meta;
        if (override.page.fonts)
            res.page.fonts = override.page.fonts;
        if (override.page.scripts)
            res.page.scripts = override.page.scripts;
        if (override.page.stylesheets)
            res.page.stylesheets = override.page.stylesheets;
        if (override.page.post)
            res.page.post = override.page.post;
    }
    if (override.dev)
        Object.assign(res.dev, override.dev);
    if (override.theme)
        res.theme = override.theme;
    if (override.markdown) {
        Object.assign(res.markdown, override.markdown);
        if (override.markdown.customComponents)
            res.markdown.BlockQuote = quotedComponents(override.markdown.customComponents);
    }
    if (override.tocMarkdown) {
        Object.assign(res.tocMarkdown, override.tocMarkdown);
        if (override.tocMarkdown.customComponents)
            res.markdown.BlockQuote = quotedComponents(override.tocMarkdown.customComponents);
    }
    if (override.misc)
        res.misc = override.misc;
    return res;
}
//# sourceMappingURL=config.js.map
{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/config.ts"],"names":[],"mappings":"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","sourcesContent":["import { File } from 'rxline/fs';\nimport { PartialOptions as MarkdownOptions, quotedComponents } from '@connectv/marked';\nimport { Compiled } from '@connectv/sdh';\nimport { TransportedFunc } from '@connectv/sdh/dist/es6/dynamic/transport/index';\nimport { ComponentMap } from '@connectv/marked/dist/es6/quote-comp';\n\nimport { CodedocTheme, DefaultTheme } from './theme';\nimport { guessTitle } from './transport/guess-title';\n\nimport { Code } from './components/code';\nimport { Heading } from './components/heading';\nimport { Button, CopyButton, Buttons } from './components/button';\nimport { Tab, Tabs } from './components/tabs';\nimport { Collapse } from './components/collapse';\nimport { DarkLight, InLight, InDark } from './components/darkmode/darklight';\nimport { GithubButton, GithubBtnActions } from './components/misc/github';\nimport { Watermark } from './components/misc/watermark';\nimport { codeSelection$ } from './components/code/selection';\nimport { sameLineLengthInCodes$ } from './components/code/same-line-length';\nimport { codeLineHints$ } from './components/code/line-hint';\nimport { codeLineRef$ } from './components/code/line-ref';\nimport { smartCopy$ } from './components/code/smart-copy';\nimport { copyHeadings$ } from './components/heading/copy-headings';\nimport { contentNavHighlight$ } from './components/page/contentnav/highlight';\nimport { deferredIframes$ } from './transport/deferred-iframe';\nimport { MetaOptions } from './components/page/meta';\nimport { FontsOptions } from './components/page/fonts';\nimport { ToCHeading } from './components/page/toc/heading';\nimport { smoothLoading$ } from './transport/smooth-loading';\nimport { tocHighlight$ } from './components/page/toc/toc-highlight';\nimport { ToCPrevNext$ } from './components/page/toc/prevnext';\nimport { postNavSearch$ } from './components/page/toc/search/post-nav';\n\n\n\n/**\n *\n * Denotes a post-processor function post-processing a generated HTML file\n *\n */\nexport type PostProcessor = (html: HTMLDocument, file: File<Compiled>) => void | Promise<void>;\n\n/**\n *\n * Represents the configuration for source files used by\n * Codedoc.\n *\n */\nexport interface SourceConfig {\n  /**\n   *\n   * The base folder to look for markdown files in. Default is `'docs/md'`.\n   *\n   */\n  base: string;\n\n  /**\n   *\n   * The name of the markdown file containing table of contents, relative\n   * to `base`. Default is `'_toc.md'`.\n   *\n   */\n  toc: string;\n\n  /**\n   *\n   * The regular expression to pick markdown files with. Default is any file with `.md` extension.\n   * Files that match this expression but are also matched by `drop` expression will not be picked.\n   *\n   */\n  pick: RegExp;\n\n  /**\n   *\n   * The regular expression to exclude some files. Default is any file starting with `_` or\n   * located in a sub-folder (relative to `base`) whose name starts with `_`.\n   * Files matching `pick` that are also matched by this expression will not be included.\n   *\n   */\n  drop: RegExp;\n}\n\n\n/**\n *\n * Represents the configuration for destination files produced by codedoc.\n *\n */\nexport interface DestConfig {\n  /**\n   *\n   * The root folder to store all created html files in. Defauls to `'.'`, i.e. the root\n   * folder of the project. Note that if you want to host your documentation using GitHub Pages,\n   * this value MUST either be `'.'` or `'docs'`.\n   *\n   */\n  html: string;\n\n  /**\n   *\n   * The root folder to store created assets and read them from. Defaults to `'.'`, i.e. the\n   * root folder of the project. Any asset not created by codedoc (like images) must also be\n   * available in this folder to be accessible in the docs.\n   *\n   */\n  assets: string;\n\n  /**\n   *\n   * The path to export the final codedoc bundle to, relative to `assets`. Defaults to `'docs/assets'`.\n   * Note that this does not determine the name of the bundle (which is set to `codedoc-bundle.js`).\n   *\n   */\n  bundle: string;\n\n  /**\n   *\n   * The path to export the final codedoc stylesheets to, relative to `assets`. Defaults to `'docs/assets'`.\n   * Note that this does not determine the name of the stylesheet file (which is set to `codedoc-styles.css`).\n   *\n   */\n  styles: string;\n\n  /**\n   *\n   * The URL namespace of the docs, default is empty.\n   * - If your docs are hosted at the root address of your domain, i.e. `https://my.server`, then this\n   * should be empty.\n   * - If your docs are NOT hosted at the root address of your domain, i.e. `https://my.server/docs`,\n   * then this should be set to that URL prefix, i.e. `/docs`.\n   * - If you are using GitHub Pages without a custom domain, then set this value to `/<repo-name>`,\n   * as GitHub will serve your docs at `https://<user-name>.github.io/<repo-name>`. However if you\n   * are using a custom domain, you might want to leave this empty.\n   *\n   */\n  namespace: string;\n}\n\n\n/**\n *\n * Denotes the configuration for codedoc's client-side bundle.\n *\n */\nexport interface BundleConfig {\n  /**\n   *\n   * A list of initialization functions that are to be executed when codedoc bundle is loaded.\n   * \n   * **WARNING**: If you override this, you might loose functionality that is by default shipped\n   * with codedoc bundle. To avoid that, simply append to the default list like this:\n   * \n   * ```ts\n   * import { configuration, DefaultConfig } from '@codedoc/core';\n   * \n   * export const config = configuration({\n   *   bundle: {\n   *     init: [...DefaultConfig.bundle.init, myFunc1$, myFunc2$, ... ]\n   *   },\n   *   ...\n   * });\n   * ```\n   *\n   */\n  init: TransportedFunc<void>[],\n}\n\n\n/**\n *\n * Denotes the configuration for title pages of the docs.\n *\n */\nexport interface TitleConfig {\n  /**\n   *\n   * Represents the base title, which is prefixed to title of all pages.\n   *\n   */\n  base: string;\n\n  /**\n   *\n   * Represents the connector string, which is used to join `base` with page specific titles.\n   * For example, if your `base` title is `My Awesome Project`, `connector` is ` > ` and\n   * specific title of a particular page is `Stuff`, then the final title of that page would be\n   * `My Awesome Project > Stuff`.\n   *\n   * Default is ` | `.\n   *\n   */\n  connector: string;\n\n  /**\n   *\n   * The function to determine the specific title of a page. Given function should return\n   * the page-specific title as a string. This string is then attached to `base` using\n   * the `connector` argument, to create the final title of any given page.\n   * \n   * The function will be provided with the following arguments,\n   * in specified order:\n   *\n   * - `content: HTMLElement` : the HTML tree of the page\n   * - `config: CodedocConfig`: codedoc configuration\n   * - `file: File<string>`   : the original markdown file from which the content was extracted\n   *\n   * Argument `file` is of type `rxline/fs.File`, which means it contains a `path` property and a `content`\n   * property.\n   *\n   * By default, `guessTitle()` function is used, which would assume the first heading in the HTML tree\n   * to contain the page specific title.\n   *\n   */\n  extractor: (content: HTMLElement, config: CodedocConfig, file: File<string>) => string;\n}\n\n\n/**\n *\n * Denotes configuration for parsing markdown into HTML elements.\n *\n */\nexport interface MarkdownConfig extends MarkdownOptions<any, any> {\n\n  /**\n   *\n   * A component map for custom components.\n   *\n   * **WARNING**: since a lot of features of codedoc come from its custom markdown\n   * components, it is highly recommended to extend the default custom components\n   * for adding your own components:\n   *\n   * ```tsx\n   * import { configuration, DefaultConfig } from '@codedoc/core';\n   * \n   * export const config = configuration({\n   *   markdown: {\n   *      customComponents: {\n   *        ...DefaultConfig.markdown.customComponents,\n   *        MyComponent,\n   *      }\n   *   },\n   *   tocMarkdown: {\n   *     customComponents: {\n   *       ...DefaultConfig.tocMarkdown.customComponents,\n   *       MyToCComponent,\n   *     }\n   *   }\n   * });\n   * ```\n   *\n   */\n  customComponents: ComponentMap;\n}\n\n\n/**\n *\n * Represents GitHub configuration of the project.\n *\n */\nexport interface GithubConfig {\n  /**\n   *\n   * GitHub username\n   *\n   */\n  user: string;\n\n  /**\n   *\n   * GitHub repository name\n   *\n   */\n  repo: string;\n\n  /**\n   *\n   * Action of the default GitHub button in header. Default is `\"Star\"`.\n   *\n   */\n  action?: GithubBtnActions;\n\n  /**\n   *\n   * Whether or not to show the count of stars/follows/etc on the default\n   * GitHub button in the header. Default is `true`.\n   *\n   */\n  count?: boolean;\n\n  /**\n   *\n   * Whether or not to use a large size for the default GitHub button in the header.\n   * Default is `false`.\n   *\n   */\n  large?: boolean;\n\n  /**\n   *\n   * Whether to use the standard GitHub icon for the default GitHub button\n   * in the header, or to use action-specific icons. Default is `true`.\n   *\n   */\n  standardIcon?: boolean;\n}\n\n\n/**\n *\n * Represents the Gitter configuration of the project.\n *\n */\nexport interface GitterConfig {\n  /**\n   *\n   * The gitter room id of the project.\n   *\n   */\n  room: string;\n}\n\n\n/**\n *\n * Represents the development configuration of the project.\n *\n */\nexport interface DevConfig {\n  /**\n   *\n   * The local port to serve the docs on in development mode.\n   *\n   */\n  port: number,\n}\n\n\n/**\n *\n * Represents a codedoc project configuration.\n *\n */\nexport interface CodedocConfig {\n  /**\n   *\n   * Configuration of source files, i.e. markdown files of the docs.\n   *\n   */\n  src: SourceConfig;\n\n  /**\n   *\n   * Configuration of destination files, i.e. where codedoc should export\n   * all generated stuff to.\n   *\n   */\n  dest: DestConfig;\n\n  /**\n   *\n   * Configuration of the client-side bundle.\n   *\n   */\n  bundle: BundleConfig;\n\n  /**\n   *\n   * Configuration of generated pages.\n   *\n   */\n  page: {\n    /**\n     *\n     * Configuration of the title of each page.\n     *\n     */\n    title: TitleConfig;\n\n    /**\n     *\n     * The URL for the favicon of pages. For a standard GitHub pages setup,\n     * you can simply put your favicon in the root folder of your project\n     * (i.e. `favicon.ico`) and set this to `\"/favicon.ico\"`.\n     *\n     */\n    favicon?: string;\n\n    /**\n     *\n     * Meta information for each page.\n     *\n     */\n    meta?: MetaOptions;\n\n    /**\n     *\n     * Configuration of fonts used in each page.\n     *\n     */\n    fonts?: FontsOptions;\n\n    /**\n     *\n     * A list of external script elements loaded in each page.\n     *\n     */\n    scripts?: HTMLElement[];\n\n    /**\n     *\n     * A list of external stylesheets (link elements) to be loaded in each page.\n     *\n     */\n    stylesheets?: HTMLElement[];\n\n    /**\n     *\n     * A list of post processor functions to post-process each page\n     *\n     */\n    post?: PostProcessor[];\n  };\n  /**\n   *\n   * The theme used for generating the docs.\n   *\n   */\n  theme: CodedocTheme;\n\n  /**\n   *\n   * Markdown options used to turn markdown into HTML.\n   *\n   */\n  markdown: MarkdownConfig;\n\n  /**\n   *\n   * Markdown options used for parsing the table of contents markdown file.\n   *\n   */\n  tocMarkdown: MarkdownConfig;\n\n  /**\n   *\n   * Development configuration.\n   *\n   */\n  dev: DevConfig;\n\n  /**\n   *\n   * Miscellaneous configuration.\n   *\n   */\n  misc?: {\n    /**\n     *\n     * Configuration for GitHub integration.\n     *\n     */\n    github?: GithubConfig;\n\n    /**\n     *\n     * Configuration for Gitter integration.\n     *\n     */\n    gitter?: GitterConfig;\n    [whatever: string]: any;\n  }\n}\n\n\nexport const DefaultMarkdownCustomComponents = /*#__PURE__*/{\n  Tab, Tabs, Collapse,\n  Button, Buttons, CopyButton,\n  DarkLight, InDark, InLight,\n  GithubButton, Watermark,\n  ToCPrevNext: ToCPrevNext$,\n};\n\n\nexport const DefaultToCMarkdownCustomComponents = /*#__PURE__*/{\n  Button, Buttons, Collapse,\n  DarkLight, InDark, InLight,\n  GithubButton, Watermark,\n};\n\n\nexport const DefaultConfig: CodedocConfig = /*#__PURE__*/{\n  src: {\n    base: 'docs/md',\n    toc: '_toc.md',\n    pick: /\\.md$/,\n    drop: /(^_)|(\\/_)/,\n  },\n\n  dest: {\n    html: '.',\n    assets: '.',\n    bundle: 'docs/assets',\n    styles: 'docs/assets',\n    namespace: '',\n  },\n\n  bundle: {\n    init: [\n      codeSelection$, sameLineLengthInCodes$, codeLineHints$, codeLineRef$, smartCopy$,\n      copyHeadings$, contentNavHighlight$, deferredIframes$, smoothLoading$, tocHighlight$,\n      postNavSearch$,\n    ],\n  },\n\n  dev: {\n    port: 3000\n  },\n\n  page: {\n    title: {\n      base: 'New Codedoc Project',\n      connector: ' | ',\n      extractor: (content, config) => guessTitle(content, config.page.title.base, config.page.title.connector),\n    }\n  },\n\n  theme: DefaultTheme,\n  markdown: {\n    Code,\n    Heading,\n    customComponents: DefaultMarkdownCustomComponents,\n    BlockQuote: quotedComponents(DefaultMarkdownCustomComponents)\n  },\n  tocMarkdown: {\n    Heading: ToCHeading,\n    customComponents: DefaultToCMarkdownCustomComponents,\n    BlockQuote: quotedComponents(DefaultToCMarkdownCustomComponents),\n  },\n}\n\n\n/**\n *\n * An object denoting overrides for the default codedoc configuration.\n *\n */\nexport interface ConfigOverride {\n  /**\n   *\n   * Configuration of source files, i.e. markdown files of the docs.\n   *\n   */\n  src?: Partial<SourceConfig>;\n\n  /**\n   *\n   * Configuration of destination files, i.e. where codedoc should export\n   * all generated stuff to.\n   *\n   */\n  dest?: Partial<DestConfig>;\n\n  /**\n   *\n   * Configuration of the client-side bundle.\n   *\n   */\n  bundle?: Partial<BundleConfig>;\n\n  /**\n   *\n   * Development configuration.\n   *\n   */\n  dev?: Partial<DevConfig>;\n\n  /**\n   *\n   * Configuration of generated pages.\n   *\n   */\n  page?: {\n    /**\n     *\n     * Configuration of the title of each page.\n     *\n     */\n    title?: Partial<TitleConfig>;\n\n    /**\n     *\n     * The URL for the favicon of pages. For a standard GitHub pages setup,\n     * you can simply put your favicon in the root folder of your project\n     * (i.e. `favicon.ico`) and set this to `\"/favicon.ico\"`.\n     *\n     */\n    favicon?: string;\n\n    /**\n     *\n     * Meta information for each page.\n     *\n     */\n    meta?: MetaOptions;\n\n    /**\n     *\n     * Configuration of fonts used in each page.\n     *\n     */\n    fonts?: FontsOptions;\n\n    /**\n     *\n     * A list of external script elements to be loaded.\n     *\n     */\n    scripts?: HTMLElement[];\n\n    /**\n     *\n     * A list of external stylesheet elements (link elements) to be loaded.\n     *\n     */\n    stylesheets?: HTMLElement[];\n\n    /**\n     *\n     * A list of post processor functions to post-process each page.\n     *\n     */\n    post?: PostProcessor[];\n  }\n\n  /**\n   *\n   * The theme used for generating the docs.\n   *\n   */\n  theme?: CodedocTheme;\n\n  /**\n   *\n   * Markdown options used to turn markdown into HTML.\n   * \n   * **WARNING**: A lot of functionality of codedoc is based on its markdown components,\n   * so be careful when you override this value. It is highly recommended to simply\n   * extend the default value, i.e.\n   *\n   * ```ts\n   * import { configuration, DefaultConfig } from '@codedoc/core';\n   * \n   * const config = configuration({\n   *   markdown: {\n   *     ...DefaultConfig.markdown,\n   *     Heading: MyCustomHeading,\n   *   }\n   * });\n   * ```\n   *\n   */\n  markdown?: Partial<MarkdownConfig>;\n\n  /**\n   *\n   * Markdown options used for parsing the table of contents markdown file.\n   * \n   * **WARNING**: A lot of functionality of codedoc is based on its markdown components,\n   * so be careful when you override this value. It is highly recommended to simply\n   * extend the default value, i.e.\n   *\n   * ```ts\n   * import { configuration, DefaultConfig } from '@codedoc/core';\n   * \n   * const config = configuration({\n   *   tocMarkdown: {\n   *     ...DefaultConfig.tocMarkdown,\n   *     Heading: MyCustomHeading,\n   *   }\n   * });\n   * ```\n   *\n   */\n  tocMarkdown?: Partial<MarkdownConfig>;\n\n  /**\n   *\n   * Miscellaneous configuration.\n   *\n   */\n  misc?: {\n    /**\n     *\n     * Configuration for GitHub integration. Providing this will by default\n     * result in a link to your repo in the footer and a GitHub button in the header,\n     * in addition to a ToC-search that would automatically search in the docs\n     * via GitHub search API.\n     *\n     */\n    github?: GithubConfig;\n\n    /**\n     *\n     * Configuration for Gitter integration. Providing this by default\n     * will result in automatic integration of Gitter chat on your documentation\n     * page with a link for activating the chat in the footer.\n     *\n     */\n    gitter?: GitterConfig;\n    [whatevs: string]: any;\n  }\n}\n\n\n/**\n *\n * Will create a codedoc configuration object (type `CodedocConfig`)\n * using the given config overrides. This will simply extend the default\n * configuration using given values in the overrides.\n *\n * @param override\n * @returns a complete codedoc configuration\n *\n */\nexport function configuration(override: ConfigOverride): CodedocConfig {\n  const res = { ...DefaultConfig };\n\n  if (override.src) Object.assign(res.src, override.src);\n  if (override.dest) Object.assign(res.dest, override.dest);\n  if (override.bundle) Object.assign(res.bundle, override.bundle);\n  if (override.page) {\n    if (override.page.title) Object.assign(res.page.title, override.page.title);\n    if (override.page.favicon) res.page.favicon = override.page.favicon;\n    if (override.page.meta) res.page.meta = override.page.meta;\n    if (override.page.fonts) res.page.fonts = override.page.fonts;\n    if (override.page.scripts) res.page.scripts = override.page.scripts;\n    if (override.page.stylesheets) res.page.stylesheets = override.page.stylesheets;\n    if (override.page.post) res.page.post = override.page.post;\n  }\n\n  if (override.dev) Object.assign(res.dev, override.dev);\n  if (override.theme) res.theme = override.theme;\n  if (override.markdown) {\n    Object.assign(res.markdown, override.markdown);\n    if (override.markdown.customComponents)\n      res.markdown.BlockQuote = quotedComponents(override.markdown.customComponents);\n  }\n\n  if (override.tocMarkdown) {\n    Object.assign(res.tocMarkdown, override.tocMarkdown);\n    if (override.tocMarkdown.customComponents)\n      res.markdown.BlockQuote = quotedComponents(override.tocMarkdown.customComponents);\n  }\n\n  if (override.misc) res.misc = override.misc;\n\n  return res;\n}\n"]}
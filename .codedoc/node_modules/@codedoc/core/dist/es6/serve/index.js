import express from 'express';
import chalk from 'chalk';
import { join } from 'path';
import { compile } from '@connectv/sdh';
const merge = /*#__PURE__*/ require('webpack-merge');
import { build } from '../build';
import { StatusCheckURL, StatusBuildingResponse, StatusReadyResponse } from './config';
import { buildingHtml } from './building-html';
import { reloadOnChange$ } from './reload';
export function serve(root, config, builder, themeInstaller, webpackConfig) {
    let built = false;
    config = Object.assign(Object.assign({}, config), { bundle: Object.assign(Object.assign({}, config.bundle), { init: [...config.bundle.init, reloadOnChange$] }) });
    build(config, builder, themeInstaller, merge({ mode: 'development' }, webpackConfig || {})).then(() => {
        built = true;
        console.log(chalk.greenBright('# ') + 'Documents rebuilt!');
    });
    const app = express();
    app.get(StatusCheckURL, (_, res) => {
        if (!built)
            res.send(StatusBuildingResponse);
        else
            res.send(StatusReadyResponse);
    });
    app.use(config.dest.namespace, express.static(config.dest.assets));
    app.get(`${config.dest.namespace}/*`, (req, res) => {
        const normalUrl = req.originalUrl.substr(config.dest.namespace.length);
        const filename = (normalUrl === '/' ? 'index' : normalUrl) + '.html';
        const filepath = join(root, config.dest.html, filename);
        res.sendFile(filepath, {}, err => {
            if (err) {
                if (!built) {
                    compile(buildingHtml)
                        .serialize()
                        .then(html => res.status(200).send(html));
                }
                else {
                    console.log(chalk.red('# Not Found::'));
                    console.log(chalk.red('# ') + req.originalUrl);
                    console.log(chalk.red('# ') + chalk.gray(filepath));
                    console.log();
                    res.status(404).send('Not Found!');
                }
            }
        });
    });
    app.listen(config.dev.port, () => {
        console.log(chalk.greenBright('# ') + 'Serving docs on '
            + chalk.cyan(`http://localhost:${config.dev.port}${config.dest.namespace}`));
    });
}
//# sourceMappingURL=index.js.map
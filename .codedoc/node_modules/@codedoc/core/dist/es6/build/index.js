var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import chalk from 'chalk';
import { join } from 'path';
import { files, pathMatch, readFile, mapExt, mapRoot } from 'rxline/fs';
import { post, save } from '@connectv/sdh';
import { initJss } from '../transport/setup-jss';
import { bundle } from './bundle';
import { content } from './content';
import { styles } from './styles';
import { loadToC } from './toc';
import { namespace } from './namespace';
export function build(config, builder, themeInstaller, webpackConfig) {
    return __awaiter(this, void 0, void 0, function* () {
        initJss();
        const _bundle = bundle(config, themeInstaller);
        const _styles = styles(config);
        const _toc = yield loadToC(config);
        return new Promise(resolve => {
            files('.', { root: config.src.base })
                .pick(pathMatch(config.src.pick))
                .drop(pathMatch(config.src.drop))
                .peek(file => console.log(`${chalk.gray('# building ........ ' + join(file.root, file.path))}`))
                .pipe(readFile(), content(builder, _toc, config, _styles), mapExt(() => '.html'), mapRoot(() => config.dest.html), post(_bundle.collect()), post(namespace(config)), (file) => {
                (config.page.post || []).forEach(p => file.content.post(html => p(html, file)));
                return file;
            }, save())
                .peek(file => console.log(`${chalk.green('#')}${chalk.gray(' built:: .........')} ${join(file.root, file.path)}`))
                .process()
                .collect(() => {
                console.log(`${chalk.gray('# building ........ ' + _styles.path)}`);
                console.log(`${chalk.gray('# building ........ ' + _bundle.path)}`);
                Promise.all([
                    save(_bundle, webpackConfig)
                        .then(() => console.log(`${chalk.green('#')} ${chalk.gray('built:: .........')} ${_bundle.path}`)),
                    _styles.save()
                        .then(() => console.log(`${chalk.green('#')} ${chalk.gray('built:: .........')} ${_styles.path}`)),
                ])
                    .then(resolve);
            });
        });
    });
}
//# sourceMappingURL=index.js.map
import { highlight, languages } from 'prismjs';
const loadLanguages = /*#__PURE__*/ require('prismjs/components/');
import { CodeStyle } from './style';
import { parse } from './parse';
export function Code(options, renderer, content) {
    renderer = renderer.plug(this.theme.styled(CodeStyle));
    const classes = this.theme.classes(CodeStyle);
    const extopts = { wmbar: undefined, filename: undefined };
    let lang = undefined;
    let extras;
    if (options.lang) {
        [lang, ...extras] = options.lang.split('|').map(_ => _.trim());
        if (!languages[lang])
            loadLanguages([lang]);
        extras.forEach(ext => {
            if (ext === '--wmbar')
                extopts.wmbar = true;
            else if (ext == '--no-wmbar')
                extopts.wmbar = false;
            else {
                extopts.filename = ext;
                extopts.wmbar = true;
            }
        });
    }
    const code$ = renderer.create("code", { class: `${lang}`, tabindex: "0" },
        renderer.create("span", { class: classes.wmbar },
            renderer.create("span", null),
            renderer.create("span", null),
            renderer.create("span", null),
            renderer.create("span", null, extopts.filename || '')));
    const [code, lines, highlights] = parse(content[0]);
    const highlines = lang ? highlight(code, languages[lang], lang).split('\n') : code.split('\n');
    lines.forEach((line, index) => {
        const highline = highlines[index];
        const counter = index + 1;
        let counter$;
        if (counter === 1 || counter === lines.length || counter % 5 === 0)
            counter$ = renderer.create("span", { class: `${classes.lineCounter} prim` }, counter);
        else
            counter$ = renderer.create("span", { class: classes.lineCounter }, counter);
        const highlighted = highlights[index];
        const line$ = renderer.create("div", { class: `${classes.line} ${highlighted ? 'highlight' : ''}`, "data-content": line, _innerHTML: highline });
        if (line$.firstChild)
            renderer.render(counter$).before(line$.firstChild);
        else
            renderer.render(counter$).on(line$);
        renderer.render(line$).on(code$);
        renderer.render(renderer.create("br", null)).on(code$);
    });
    const wmbar = lines.length > 1 && (this.theme.theme.code.wmbar || extopts.wmbar) && extopts.wmbar !== false;
    return renderer.create("pre", { class: wmbar ? 'with-bar' : '' }, code$);
}
export { CodeStyle } from './style';
//# sourceMappingURL=index.js.map
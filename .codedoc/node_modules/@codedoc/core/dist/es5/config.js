"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var marked_1 = require("@connectv/marked");
var theme_1 = require("./theme");
var guess_title_1 = require("./transport/guess-title");
var code_1 = require("./components/code");
var heading_1 = require("./components/heading");
var button_1 = require("./components/button");
var tabs_1 = require("./components/tabs");
var collapse_1 = require("./components/collapse");
var darklight_1 = require("./components/darkmode/darklight");
var github_1 = require("./components/misc/github");
var watermark_1 = require("./components/misc/watermark");
var selection_1 = require("./components/code/selection");
var same_line_length_1 = require("./components/code/same-line-length");
var line_hint_1 = require("./components/code/line-hint");
var line_ref_1 = require("./components/code/line-ref");
var smart_copy_1 = require("./components/code/smart-copy");
var copy_headings_1 = require("./components/heading/copy-headings");
var highlight_1 = require("./components/page/contentnav/highlight");
var deferred_iframe_1 = require("./transport/deferred-iframe");
var heading_2 = require("./components/page/toc/heading");
var smooth_loading_1 = require("./transport/smooth-loading");
var toc_highlight_1 = require("./components/page/toc/toc-highlight");
var prevnext_1 = require("./components/page/toc/prevnext");
var post_nav_1 = require("./components/page/toc/search/post-nav");
exports.DefaultMarkdownCustomComponents = {
    Tab: tabs_1.Tab, Tabs: tabs_1.Tabs, Collapse: collapse_1.Collapse,
    Button: button_1.Button, Buttons: button_1.Buttons, CopyButton: button_1.CopyButton,
    DarkLight: darklight_1.DarkLight, InDark: darklight_1.InDark, InLight: darklight_1.InLight,
    GithubButton: github_1.GithubButton, Watermark: watermark_1.Watermark,
    ToCPrevNext: prevnext_1.ToCPrevNext$,
};
exports.DefaultToCMarkdownCustomComponents = {
    Button: button_1.Button, Buttons: button_1.Buttons, Collapse: collapse_1.Collapse,
    DarkLight: darklight_1.DarkLight, InDark: darklight_1.InDark, InLight: darklight_1.InLight,
    GithubButton: github_1.GithubButton, Watermark: watermark_1.Watermark,
};
exports.DefaultConfig = {
    src: {
        base: 'docs/md',
        toc: '_toc.md',
        pick: /\.md$/,
        drop: /(^_)|(\/_)/,
    },
    dest: {
        html: '.',
        assets: '.',
        bundle: 'docs/assets',
        styles: 'docs/assets',
        namespace: '',
    },
    bundle: {
        init: [
            selection_1.codeSelection$, same_line_length_1.sameLineLengthInCodes$, line_hint_1.codeLineHints$, line_ref_1.codeLineRef$, smart_copy_1.smartCopy$,
            copy_headings_1.copyHeadings$, highlight_1.contentNavHighlight$, deferred_iframe_1.deferredIframes$, smooth_loading_1.smoothLoading$, toc_highlight_1.tocHighlight$,
            post_nav_1.postNavSearch$,
        ],
    },
    dev: {
        port: 3000
    },
    page: {
        title: {
            base: 'New Codedoc Project',
            connector: ' | ',
            extractor: function (content, config) { return guess_title_1.guessTitle(content, config.page.title.base, config.page.title.connector); },
        }
    },
    theme: theme_1.DefaultTheme,
    markdown: {
        Code: code_1.Code,
        Heading: heading_1.Heading,
        customComponents: exports.DefaultMarkdownCustomComponents,
        BlockQuote: marked_1.quotedComponents(exports.DefaultMarkdownCustomComponents)
    },
    tocMarkdown: {
        Heading: heading_2.ToCHeading,
        customComponents: exports.DefaultToCMarkdownCustomComponents,
        BlockQuote: marked_1.quotedComponents(exports.DefaultToCMarkdownCustomComponents),
    },
};
/**
 *
 * Will create a codedoc configuration object (type `CodedocConfig`)
 * using the given config overrides. This will simply extend the default
 * configuration using given values in the overrides.
 *
 * @param override
 * @returns a complete codedoc configuration
 *
 */
function configuration(override) {
    var res = __assign({}, exports.DefaultConfig);
    if (override.src)
        Object.assign(res.src, override.src);
    if (override.dest)
        Object.assign(res.dest, override.dest);
    if (override.bundle)
        Object.assign(res.bundle, override.bundle);
    if (override.page) {
        if (override.page.title)
            Object.assign(res.page.title, override.page.title);
        if (override.page.favicon)
            res.page.favicon = override.page.favicon;
        if (override.page.meta)
            res.page.meta = override.page.meta;
        if (override.page.fonts)
            res.page.fonts = override.page.fonts;
        if (override.page.scripts)
            res.page.scripts = override.page.scripts;
        if (override.page.stylesheets)
            res.page.stylesheets = override.page.stylesheets;
        if (override.page.post)
            res.page.post = override.page.post;
    }
    if (override.dev)
        Object.assign(res.dev, override.dev);
    if (override.theme)
        res.theme = override.theme;
    if (override.markdown) {
        Object.assign(res.markdown, override.markdown);
        if (override.markdown.customComponents)
            res.markdown.BlockQuote = marked_1.quotedComponents(override.markdown.customComponents);
    }
    if (override.tocMarkdown) {
        Object.assign(res.tocMarkdown, override.tocMarkdown);
        if (override.tocMarkdown.customComponents)
            res.markdown.BlockQuote = marked_1.quotedComponents(override.tocMarkdown.customComponents);
    }
    if (override.misc)
        res.misc = override.misc;
    return res;
}
exports.configuration = configuration;
//# sourceMappingURL=config.js.map
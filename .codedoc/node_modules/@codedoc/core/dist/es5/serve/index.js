"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var express_1 = __importDefault(require("express"));
var chalk_1 = __importDefault(require("chalk"));
var path_1 = require("path");
var sdh_1 = require("@connectv/sdh");
var merge = /*#__PURE__*/ require('webpack-merge');
var build_1 = require("../build");
var config_1 = require("./config");
var building_html_1 = require("./building-html");
var reload_1 = require("./reload");
function serve(root, config, builder, themeInstaller, webpackConfig) {
    var built = false;
    config = __assign(__assign({}, config), { bundle: __assign(__assign({}, config.bundle), { init: __spreadArrays(config.bundle.init, [reload_1.reloadOnChange$]) }) });
    build_1.build(config, builder, themeInstaller, merge({ mode: 'development' }, webpackConfig || {})).then(function () {
        built = true;
        console.log(chalk_1.default.greenBright('# ') + 'Documents rebuilt!');
    });
    var app = express_1.default();
    app.get(config_1.StatusCheckURL, function (_, res) {
        if (!built)
            res.send(config_1.StatusBuildingResponse);
        else
            res.send(config_1.StatusReadyResponse);
    });
    app.use(config.dest.namespace, express_1.default.static(config.dest.assets));
    app.get(config.dest.namespace + "/*", function (req, res) {
        var normalUrl = req.originalUrl.substr(config.dest.namespace.length);
        var filename = (normalUrl === '/' ? 'index' : normalUrl) + '.html';
        var filepath = path_1.join(root, config.dest.html, filename);
        res.sendFile(filepath, {}, function (err) {
            if (err) {
                if (!built) {
                    sdh_1.compile(building_html_1.buildingHtml)
                        .serialize()
                        .then(function (html) { return res.status(200).send(html); });
                }
                else {
                    console.log(chalk_1.default.red('# Not Found::'));
                    console.log(chalk_1.default.red('# ') + req.originalUrl);
                    console.log(chalk_1.default.red('# ') + chalk_1.default.gray(filepath));
                    console.log();
                    res.status(404).send('Not Found!');
                }
            }
        });
    });
    app.listen(config.dev.port, function () {
        console.log(chalk_1.default.greenBright('# ') + 'Serving docs on '
            + chalk_1.default.cyan("http://localhost:" + config.dev.port + config.dest.namespace));
    });
}
exports.serve = serve;
//# sourceMappingURL=index.js.map
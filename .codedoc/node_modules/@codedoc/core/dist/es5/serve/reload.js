"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = require("@connectv/html");
var rxjs_1 = require("rxjs");
var ajax_1 = require("rxjs/ajax");
var operators_1 = require("rxjs/operators");
var transport_1 = require("@connectv/sdh/transport");
var config_1 = require("./config");
var renderer_1 = require("../transport/renderer");
var loading_1 = require("../components/util/loading");
function Toast(_, renderer) {
    var holder = html_1.ref();
    this.track({
        bind: function () {
            setTimeout(function () { return holder.$.style.transform = ''; }, 10);
        }
    });
    return renderer.create("div", { _ref: holder, style: "\n    position: fixed;\n    bottom: 32px; right: 32px;\n    z-index: 10000;\n    background: rgba(64, 64, 64, .65);\n    color: white;\n    padding: 24px;\n    border-radius: 8px;\n    transform: translateY(200px);\n    backdrop-filter: blur(12px);\n    -webkit-backdrop-filter: blur(12px);\n    transition: transform .3s;\n  " },
        renderer.create(loading_1.Loading, null),
        "  \u2002Rebuilding documents ...");
}
exports.Toast = Toast;
function reloadOnChange() {
    var building = false;
    var renderer = renderer_1.getRenderer();
    var buildingMode = function () {
        if (!building) {
            building = true;
            renderer.render(renderer.create(Toast, null)).on(document.body);
        }
    };
    rxjs_1.interval(500).pipe(operators_1.switchMap(function () { return ajax_1.ajax({
        url: config_1.StatusCheckURL,
        responseType: 'text',
        timeout: 200,
    })
        .pipe(operators_1.catchError(function () { return rxjs_1.of(buildingMode()); })); }), operators_1.tap(function (result) {
        if (result) {
            if (result.response === config_1.StatusBuildingResponse)
                buildingMode();
            else if (result.response === config_1.StatusReadyResponse && building) {
                location.reload();
            }
        }
    }))
        .subscribe();
}
exports.reloadOnChange = reloadOnChange;
exports.reloadOnChange$ = transport_1.funcTransport(reloadOnChange);
//# sourceMappingURL=reload.js.map